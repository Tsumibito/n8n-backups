{
  "active": false,
  "connections": {
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Baserow GET Article",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Return ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow upload ": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delete image Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find all images in HTML": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Replace Image URL Code",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delete image Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow GET Article": {
      "main": [
        [
          {
            "node": "Find all images in HTML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [
          {
            "node": "Return ID",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Baserow Loop Get",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow Loop Get": {
      "main": [
        [
          {
            "node": "Baserow upload ",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete image Code": {
      "main": [
        [
          {
            "node": "Baserow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Replace Image URL Code": {
      "main": [
        [
          {
            "node": "Baserow1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return ID": {
      "main": [
        [
          {
            "node": "Finish",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-11-09T09:35:20.629Z",
  "id": "PHQQyHKIBZp4JTHv",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "-- Navi upload images for blog post",
  "nodes": [
    {
      "parameters": {},
      "id": "115a1fd4-35bf-413d-a8e6-05917566275d",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        860,
        680
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f3f9ff3e-8cbc-4036-9b4e-181acba54408",
              "leftValue": "={{ $json}}",
              "rightValue": 0,
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "767790ab-f1c3-4e2d-ba2c-4dd72e370aa3",
      "name": "If",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2060,
        680
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.baserow.io/api/user-files/upload-via-url/",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token cAkghBkNcvaZnJ0HJBBZAz5X8b7pxdBW"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "url",
              "value": "={{ $('Loop Over Items1').item.json.url }}"
            }
          ]
        },
        "options": {}
      },
      "id": "6482ada1-3eb2-4955-bf5a-2504f26ed046",
      "name": "Baserow upload ",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2060,
        1160
      ],
      "alwaysOutputData": false,
      "retryOnFail": true,
      "maxTries": 2,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Функция для извлечения URL изображений из Markdown\n// Формат ссылки на картинку в Markdown: ![alt-текст](url)\nfunction extractImageUrlsFromMarkdown(markdown) {\n  const urls = [];\n  // Регулярка ищет конструкции вида ![альт-текст](URL)\n  const regex = /!\\[[^\\]]*?\\]\\((.*?)\\)/g;\n  let match;\n\n  while ((match = regex.exec(markdown)) !== null) {\n    // Исходный URL из скобок\n    const fullUrl = match[1];\n    // Удаляем всё, что идёт после знака '?'\n    const cleanedUrl = fullUrl.split('?')[0];\n    \n    // Исключаем URL, содержащие \"baserow-backend\"\n    if (!cleanedUrl.includes(\"baserow-backend\")) {\n      urls.push(cleanedUrl);\n    }\n  }\n  return urls;\n}\n\n// Массив выходных элементов\nlet outputItems = [];\n\n// Проходимся по всем входным элементам n8n\nfor (let i = 0; i < items.length; i++) {\n  const currentItem = items[i].json;\n  \n  // Извлекаем ID и текст статьи (Markdown)\n  const currentId = currentItem.id;\n  const markdown = currentItem[\"Post_Body_RU_m\"];\n\n  // Если и ID, и Markdown-текст есть, ищем картинки\n  if (currentId && markdown) {\n    const imageUrls = extractImageUrlsFromMarkdown(markdown);\n\n    // Для каждой найденной картинки формируем отдельный элемент\n    imageUrls.forEach(url => {\n      outputItems.push({\n        json: {\n          id: currentId,\n          url: url\n        }\n      });\n    });\n  }\n}\n\n// Возвращаем итоговый массив объектов [{json: {id, url}}, ...]\nreturn outputItems;"
      },
      "id": "ac61eba8-4ea7-42f5-8a03-2c02365a4e16",
      "name": "Find all images in HTML",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1720,
        680
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "782a9536-d95f-45a7-9899-9c8c955182ae",
              "leftValue": "={{ $json.name }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "70336799-4d43-4b69-96a8-1e911d18298a",
              "leftValue": "={{ $json.url }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "e5e7a533-76c9-4bcc-beb6-fa51b74a09dd",
      "name": "If1",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        2340,
        1140
      ]
    },
    {
      "parameters": {},
      "id": "a54887c1-305f-4013-88df-c2c98eaf01fd",
      "name": "Finish",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        2960,
        840
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "databaseId": 139118,
        "tableId": 356544,
        "rowId": "={{ $json.id }}"
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        1180,
        680
      ],
      "id": "7e1292ea-1569-4080-9adc-edca6e64d51e",
      "name": "Baserow GET Article",
      "retryOnFail": true,
      "credentials": {
        "baserowApi": {
          "id": "iKQh0Jcxz7wezRWR",
          "name": "Baserow account"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1220,
        1140
      ],
      "id": "3822ada5-8054-4675-b8f2-6735b1c50bad",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "operation": "get",
        "databaseId": 139118,
        "tableId": 356544,
        "rowId": "={{ $json.id }}"
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        1780,
        1160
      ],
      "id": "d90fb055-d2e0-488f-92cb-03d1c0964c61",
      "name": "Baserow Loop Get",
      "retryOnFail": true,
      "credentials": {
        "baserowApi": {
          "id": "iKQh0Jcxz7wezRWR",
          "name": "Baserow account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const oldUrl = $('Loop Over Items1').item.json.url;\nconst oldMarkdown = $('Baserow Loop Get').item.json.Post_Body_RU_m;\n\nlet newMarkdown = oldMarkdown;\n\nwhile (true) {\n  // Ищем ссылку oldUrl в тексте\n  const urlPos = newMarkdown.indexOf(oldUrl);\n  if (urlPos === -1) {\n    // Больше нет вхождений oldUrl\n    break;\n  }\n\n  // Ищем начало блока Markdown-картинки, т.е. '![', идущую ПЕРЕД urlPos\n  const startPos = newMarkdown.lastIndexOf('![', urlPos);\n  if (startPos === -1) {\n    // Не нашли '![', значит не похоже на Markdown-картинку - выходим\n    break;\n  }\n\n  // Ищем закрывающую скобку ) ПОСЛЕ urlPos\n  const endPos = newMarkdown.indexOf(')', urlPos);\n  if (endPos === -1) {\n    // Не нашли ), обрываем цикл\n    break;\n  }\n\n  // Вырезаем из текста всё от '![...' до ')'\n  newMarkdown = newMarkdown.slice(0, startPos) + newMarkdown.slice(endPos + 1);\n}\n\n// Возвращаем результат\nreturn [\n  {\n    json: {\n      data: newMarkdown\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2600,
        1260
      ],
      "id": "65deb876-5b39-4952-be0e-461989277dbb",
      "name": "Delete image Code"
    },
    {
      "parameters": {
        "jsCode": "const oldUrl = $('Loop Over Items1').item.json.url;\nconst newUrl = $('If1').item.json.url;\nconst oldMarkdown = $('Baserow Loop Get').item.json.Post_Body_RU_m;\n\n// Найдем все вхождения маркдаун-изображений\nconst findImages = (text) => {\n  const images = [];\n  let startIndex = text.indexOf('![');\n  \n  while (startIndex !== -1) {\n    const endIndex = text.indexOf(')', startIndex);\n    if (endIndex !== -1) {\n      const imageTag = text.substring(startIndex, endIndex + 1);\n      const urlStart = imageTag.indexOf('(') + 1;\n      const urlEnd = imageTag.indexOf(')', urlStart);\n      const fullUrl = imageTag.substring(urlStart, urlEnd);\n      \n      images.push({\n        full: imageTag,\n        url: fullUrl, // полный URL с параметрами\n        start: startIndex,\n        end: endIndex + 1\n      });\n    }\n    startIndex = text.indexOf('![', endIndex);\n  }\n  \n  return images;\n};\n\nlet newMarkdown = oldMarkdown;\nconst images = findImages(oldMarkdown);\n\nimages.forEach(img => {\n  // Проверяем, содержит ли URL изображения наш базовый URL\n  if (img.url.startsWith(oldUrl)) {\n    // Сохраняем alt текст\n    const altStart = img.full.indexOf('![') + 2;\n    const altEnd = img.full.indexOf(']');\n    const alt = img.full.substring(altStart, altEnd);\n    \n    // Создаем новый маркдаун с тем же alt и новым URL\n    const newImage = `![${alt}](${newUrl})`;\n    \n    newMarkdown = newMarkdown.replace(img.full, newImage);\n  }\n});\n\nreturn [\n  {\n    json: {\n      data: newMarkdown,\n      oldUrl,\n      newUrl,\n      imagesFound: images.length,\n      processedMarkdown: newMarkdown !== oldMarkdown\n    }\n  }\n];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2600,
        1060
      ],
      "id": "2be93428-51cb-4eb9-b2ec-e3aaa4042891",
      "name": "Replace Image URL Code"
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 139118,
        "tableId": 356544,
        "rowId": "={{ $('Baserow Loop Get').item.json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3176723,
              "fieldValue": "={{ $json.data }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        3020,
        1280
      ],
      "id": "a95bb891-98f7-48a7-be45-2305b1bf0d7d",
      "name": "Baserow",
      "retryOnFail": true,
      "credentials": {
        "baserowApi": {
          "id": "iKQh0Jcxz7wezRWR",
          "name": "Baserow account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 139118,
        "tableId": 356544,
        "rowId": "={{ $('Baserow Loop Get').last().json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3176723,
              "fieldValue": "={{ $json.data }}"
            },
            {
              "fieldId": 2660471,
              "fieldValue": "={{ $('If1').last().json.name }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        3440,
        1300
      ],
      "id": "d85ebb46-9ec7-456f-8e59-67ed4c543f7a",
      "name": "Baserow1",
      "retryOnFail": true,
      "credentials": {
        "baserowApi": {
          "id": "iKQh0Jcxz7wezRWR",
          "name": "Baserow account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "ea7210f1-fd98-44c0-a8b6-b5c5b53d125c",
              "name": "id",
              "value": "={{ $('Baserow GET Article').item.json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2540,
        840
      ],
      "id": "43a22709-b8dd-46b7-9726-196efd758de6",
      "name": "Return ID",
      "alwaysOutputData": false,
      "executeOnce": true
    }
  ],
  "pinData": {
    "Execute Workflow Trigger": [
      {
        "json": {
          "id": "434"
        }
      }
    ]
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-11-10T11:13:00.957Z",
      "updatedAt": "2024-11-10T11:13:00.957Z",
      "id": "UCWLA0c2FsmSKRso",
      "name": "sub"
    },
    {
      "createdAt": "2024-11-10T11:12:42.068Z",
      "updatedAt": "2024-11-10T11:12:42.068Z",
      "id": "vgr897z7Ao8rJnZh",
      "name": "navi"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2024-12-29T11:49:26.000Z",
  "versionId": "a7a8dcba-60ea-4c15-b7a7-2b5c9d6480e0"
}