{
  "active": true,
  "connections": {
    "n8n Form Trigger": {
      "main": [
        [
          {
            "node": "Baserow Upload Main Image",
            "type": "main",
            "index": 0
          },
          {
            "node": "Data Input",
            "type": "main",
            "index": 0
          },
          {
            "node": "Baserow Upload Thumbnail Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate slug": {
      "main": [
        [
          {
            "node": "Baserow create blog row",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow create blog row": {
      "main": [
        [
          {
            "node": "Get ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Translate post to UA": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Translate post to EN": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "DeepL Post Summary translate UA": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 4
          }
        ]
      ]
    },
    "DeepL Post Summary translate EN": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 5
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Baserow add Post translations and summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "DeepL Post Summary translate UA",
            "type": "main",
            "index": 0
          },
          {
            "node": "DeepL Post Summary translate EN",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 3
          }
        ]
      ]
    },
    "Baserow Upload Main Image": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Baserow Upload Thumbnail Image": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 2
          }
        ]
      ]
    },
    "Merge2": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Baserow files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow add Post translations and summary": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic translate": {
      "main": [
        []
      ]
    },
    "Upload Post Images": {
      "main": [
        [
          {
            "node": "Baserow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get ID": {
      "main": [
        [
          {
            "node": "Merge2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Basic translate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Upload Post Images",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Input": {
      "main": [
        [
          {
            "node": "Generate slug",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow": {
      "main": [
        [
          {
            "node": "Get_post_ru",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get_post_ru": {
      "main": [
        [
          {
            "node": "Translate post to UA",
            "type": "main",
            "index": 0
          },
          {
            "node": "Translate post to EN",
            "type": "main",
            "index": 0
          },
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get ID 2": {
      "main": [
        [
          {
            "node": "Navi link builder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Baserow1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Baserow1": {
      "main": [
        [
          {
            "node": "Get ID 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Navi link builder": {
      "main": [
        [
          {
            "node": "Baserow2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-11-08T09:25:05.152Z",
  "id": "Hoypp0GMRnPzwTXo",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Navi BLOG post",
  "nodes": [
    {
      "parameters": {
        "path": "79d3dee2-ee2b-4070-8428-947ee2cc25de",
        "formTitle": "Navi blog post",
        "formDescription": "Create blog post at navi",
        "formFields": {
          "values": [
            {
              "fieldLabel": "Заголовок RU",
              "requiredField": true
            },
            {
              "fieldLabel": "Текст поста RU markdown",
              "fieldType": "textarea",
              "requiredField": true
            },
            {
              "fieldLabel": "Title",
              "requiredField": true
            },
            {
              "fieldLabel": "Description",
              "requiredField": true
            },
            {
              "fieldLabel": "keywords",
              "requiredField": true
            },
            {
              "fieldLabel": "Main Image (1400х655)",
              "fieldType": "file",
              "multipleFiles": false
            },
            {
              "fieldLabel": "Thumbnail image (400x400)",
              "fieldType": "file",
              "multipleFiles": false
            }
          ]
        },
        "responseMode": "lastNode",
        "options": {}
      },
      "id": "eef15e72-97b0-419a-a870-d7332b8f4b40",
      "name": "n8n Form Trigger",
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.1,
      "position": [
        -2040,
        540
      ],
      "webhookId": "79d3dee2-ee2b-4070-8428-947ee2cc25de"
    },
    {
      "parameters": {
        "jsCode": "// Функция транслитерации\nfunction transliterate(text) {\n  const transliterationTable = {\n    'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd',\n    'е': 'e', 'ё': 'yo', 'ж': 'zh', 'з': 'z',\n    'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l',\n    'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p',\n    'р': 'r', 'с': 's', 'т': 't', 'у': 'u',\n    'ф': 'f', 'х': 'h', 'ц': 'ts', 'ч': 'ch',\n    'ш': 'sh', 'щ': 'sch', 'ъ': '', 'ы': 'y', 'ь': '',\n    'э': 'e', 'ю': 'yu', 'я': 'ya',\n    'А': 'A', 'Б': 'B', 'В': 'V', 'Г': 'G', 'Д': 'D',\n    'Е': 'E', 'Ё': 'Yo', 'Ж': 'Zh', 'З': 'Z',\n    'И': 'I', 'Й': 'Y', 'К': 'K', 'Л': 'L',\n    'М': 'M', 'Н': 'N', 'О': 'O', 'П': 'P',\n    'Р': 'R', 'С': 'S', 'Т': 'T', 'У': 'U',\n    'Ф': 'F', 'Х': 'H', 'Ц': 'Ts', 'Ч': 'Ch',\n    'Ш': 'Sh', 'Щ': 'Sch', 'Ъ': '', 'Ы': 'Y', 'Ь': '',\n    'Э': 'E', 'Ю': 'Yu', 'Я': 'Ya',\n  };\n\n  return text.split('').map(function (char) {\n    return transliterationTable[char] || char;\n  }).join('');\n}\n\n// Функция создания слага\nfunction slugify(text) {\n  // Транслитерация\n  text = transliterate(text);\n\n  // Приводим к нижнему регистру\n  text = text.toLowerCase();\n\n  // Заменяем все символы, кроме букв и цифр, на дефисы\n  text = text.replace(/[^a-z0-9]+/g, '-');\n\n  // Удаляем начальные и конечные дефисы\n  text = text.replace(/^-+|-+$/g, '');\n\n  return text;\n}\n\n// Перебираем каждый элемент в массиве items\nreturn items.map(item => {\n  // Получаем значение из поля \"Заголовок RU\"\n  const title = item.json['post Name'];\n\n  // Генерируем слаг\n  const slug = slugify(title);\n\n  // Добавляем поле \"Slug\" в текущий элемент\n  return {\n    json: {\n      ...item.json,\n      'Slug': slug\n    }\n  };\n});\n"
      },
      "id": "efccfd56-c90a-49ec-a19e-1b5888415b79",
      "name": "Generate slug",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1260,
        540
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "mode": "id",
          "value": "=A50VsfUdjPaO0gkR"
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "id": "1c6eb96e-5881-4ec7-ba0b-accaa0257bda",
      "name": "Translate post to UA",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.1,
      "position": [
        860,
        620
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "mxjz49LdU7xLPaBS",
          "mode": "list",
          "cachedResultName": "-- Translate big markdown from RU to EN"
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "id": "b1939705-d072-416d-904c-ec4ba2ab95f2",
      "name": "Translate post to EN",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.1,
      "position": [
        860,
        860
      ]
    },
    {
      "parameters": {
        "operation": "create",
        "databaseId": 139118,
        "tableId": 356544,
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 2660068,
              "fieldValue": "={{ $json.Slug }}"
            },
            {
              "fieldId": 2660067,
              "fieldValue": "={{ $('Data Input').item.json['post Name'] }}"
            },
            {
              "fieldId": 2660083,
              "fieldValue": "={{ $('Data Input').item.json.title }}"
            },
            {
              "fieldId": 2660084,
              "fieldValue": "={{ $('Data Input').item.json.description }}"
            },
            {
              "fieldId": 2896460,
              "fieldValue": "={{ $('Data Input').item.json.keywords }}"
            },
            {
              "fieldId": 2660079,
              "fieldValue": "false"
            },
            {
              "fieldId": 3176727,
              "fieldValue": "false"
            },
            {
              "fieldId": 3176723,
              "fieldValue": "={{ $json.data }}"
            },
            {
              "fieldId": 2660081,
              "fieldValue": "alex-burlakov"
            }
          ]
        }
      },
      "id": "e86320d7-f3fb-437d-9bb9-047e9e6a9ba0",
      "name": "Baserow create blog row",
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        -1020,
        540
      ],
      "credentials": {
        "baserowApi": {
          "id": "iKQh0Jcxz7wezRWR",
          "name": "Baserow account"
        }
      }
    },
    {
      "parameters": {
        "text": "={{ $json.message.content }}",
        "translateTo": "UK",
        "additionalFields": {}
      },
      "id": "ca790bd6-3187-44e6-8038-b551a81b7a0a",
      "name": "DeepL Post Summary translate UA",
      "type": "n8n-nodes-base.deepL",
      "typeVersion": 1,
      "position": [
        1240,
        1160
      ],
      "credentials": {
        "deepLApi": {
          "id": "Fa3gRfaikTneP7NW",
          "name": "DeepL account"
        }
      }
    },
    {
      "parameters": {
        "text": "={{ $json.message.content }}",
        "translateTo": "EN-US",
        "additionalFields": {}
      },
      "id": "5f62bd84-3185-4509-b8ba-2b373d3b82a8",
      "name": "DeepL Post Summary translate EN",
      "type": "n8n-nodes-base.deepL",
      "typeVersion": 1,
      "position": [
        1260,
        1380
      ],
      "credentials": {
        "deepLApi": {
          "id": "Fa3gRfaikTneP7NW",
          "name": "DeepL account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 139118,
        "tableId": 356544,
        "rowId": "={{ $node[\"Get ID\"].json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3176724,
              "fieldValue": "={{ $node[\"Translate post to UA\"].json.Data }}"
            },
            {
              "fieldId": 3176725,
              "fieldValue": "={{ $node[\"Translate post to EN\"].json.Data }}"
            },
            {
              "fieldId": 2660076,
              "fieldValue": "={{ $node[\"OpenAI\"].json.message.content }}"
            },
            {
              "fieldId": 2660164,
              "fieldValue": "={{ $node['DeepL Post Summary translate UA'].json.text }}"
            },
            {
              "fieldId": 2660165,
              "fieldValue": "={{ $node['DeepL Post Summary translate EN'].json.text }}"
            }
          ]
        }
      },
      "id": "700dc82f-7860-4a09-a42b-2771adc7a052",
      "name": "Baserow add Post translations and summary",
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        1780,
        620
      ],
      "credentials": {
        "baserowApi": {
          "id": "iKQh0Jcxz7wezRWR",
          "name": "Baserow account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 139118,
        "tableId": 356544,
        "rowId": "={{ $json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 2660077,
              "fieldValue": "={{ $json.main_name }}"
            },
            {
              "fieldId": 2660078,
              "fieldValue": "={{ $json.thumb_name }}"
            }
          ]
        }
      },
      "id": "d8bbf622-23f3-448c-a92d-3d7e32b565fe",
      "name": "Baserow files",
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        140,
        1460
      ],
      "credentials": {
        "baserowApi": {
          "id": "iKQh0Jcxz7wezRWR",
          "name": "Baserow account"
        }
      }
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "numberInputs": 6
      },
      "id": "25f72ad9-b285-40ae-b5cc-9bfe4640aa9c",
      "name": "Merge1",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1520,
        560
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "o1-mini",
          "mode": "list",
          "cachedResultName": "O1-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=Сгенерируй привлекательное и интересное резюме для статьи на русском языке, так чтобы ее захотелось прочитать, не менее чем на 400 символов с пробелами, но не более чем на 550 символов с пробелами в текстовом формате без разметки. В качестве ответа верни только готовое резюме поста, без каких либо комментариев и дополнений. \n\nВот текст поста в Markdown:\n{{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "5fb8310c-c8a2-4ce1-884f-bb1a9cc8ab82",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.5,
      "position": [
        840,
        1120
      ],
      "credentials": {
        "openAiApi": {
          "id": "LWqwOoyrWqYHIcaW",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.baserow.io/api/user-files/upload-file/",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token cAkghBkNcvaZnJ0HJBBZAz5X8b7pxdBW"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "Main_Image__1400_655_"
            }
          ]
        },
        "options": {}
      },
      "id": "723b8829-3abe-45a1-bdd2-c9e31ad7abd0",
      "name": "Baserow Upload Main Image",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -860,
        1260
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.baserow.io/api/user-files/upload-file/",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Token cAkghBkNcvaZnJ0HJBBZAz5X8b7pxdBW"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "Thumbnail_image__400x400_"
            }
          ]
        },
        "options": {}
      },
      "id": "ff401097-f055-470b-8c76-2bfd2d50a03c",
      "name": "Baserow Upload Thumbnail Image",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -860,
        1480
      ]
    },
    {
      "parameters": {
        "mode": "chooseBranch",
        "numberInputs": 3
      },
      "id": "9ca9ecc1-5959-4596-b9d9-66e8d000ddea",
      "name": "Merge2",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        -340,
        1460
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем id из узла 'Baserow create blog row'\nconst baserowCreateBlogRowItems = $items(\"Get ID\", 0, 0);\n\nif (!baserowCreateBlogRowItems || baserowCreateBlogRowItems.length === 0) {\n  throw new Error(\"Не удалось найти данные в узле 'Baserow create blog row'\");\n}\n\nconst id = baserowCreateBlogRowItems[0].json.id;\n\n// Получаем имя из узла 'Baserow Upload Main Image'\nconst baserowUploadMainImageItems = $items(\"Baserow Upload Main Image\", 0, 0);\n\nif (!baserowUploadMainImageItems || baserowUploadMainImageItems.length === 0) {\n  throw new Error(\"Не удалось найти данные в узле 'Baserow Upload Main Image'\");\n}\n\nconst main_name = baserowUploadMainImageItems[0].json.name;\n\n// Получаем имя из узла 'Baserow Upload Thumbnail Image'\nconst baserowUploadThumbnailImageItems = $items(\"Baserow Upload Thumbnail Image\", 0, 0);\n\nif (!baserowUploadThumbnailImageItems || baserowUploadThumbnailImageItems.length === 0) {\n  throw new Error(\"Не удалось найти данные в узле 'Baserow Upload Thumbnail Image'\");\n}\n\nconst thumb_name = baserowUploadThumbnailImageItems[0].json.name;\n\n// Возвращаем данные в виде JSON\nreturn [\n  {\n    json: {\n      id: id,\n      main_name: main_name,\n      thumb_name: thumb_name\n    }\n  }\n];\n"
      },
      "id": "105c33e8-788c-4973-9bb1-155a49502091",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -100,
        1460
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "UERhR9Z3FoxynX4L",
          "mode": "list",
          "cachedResultName": "--- Navi Blog Post translate"
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.1,
      "position": [
        20,
        400
      ],
      "id": "56e1ff73-3303-4598-9a99-564c22b45d06",
      "name": "Basic translate"
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "PHQQyHKIBZp4JTHv",
          "mode": "list",
          "cachedResultName": "-- Navi upload images for blog post"
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "id": "6900ee33-00e3-4587-8b19-2bb58fd2154f",
      "name": "Upload Post Images",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.1,
      "position": [
        20,
        680
      ]
    },
    {
      "parameters": {
        "workflowId": {
          "__rl": true,
          "value": "OiplipE8Zch4oHXE",
          "mode": "list",
          "cachedResultName": "--Navi link builder"
        },
        "options": {
          "waitForSubWorkflow": true
        }
      },
      "id": "a60396f8-0c30-4de0-87a9-fff0a208ea74",
      "name": "Navi link builder",
      "type": "n8n-nodes-base.executeWorkflow",
      "typeVersion": 1.1,
      "position": [
        3180,
        620
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "04fafee6-7626-4a26-9c9d-78948cee7657",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -660,
        540
      ],
      "id": "3dae109f-7297-4bc5-ac00-b26127524624",
      "name": "Get ID"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "6d788532-3884-4e8a-b33b-1fef59f5bc40",
              "name": "post Name",
              "value": "={{ $json['Заголовок RU'] }}",
              "type": "string"
            },
            {
              "id": "079cc562-ad3b-4b84-bc70-a015bc09432f",
              "name": "data",
              "value": "={{ $json['Текст поста RU markdown'] }}",
              "type": "string"
            },
            {
              "id": "0d285180-66e6-410e-9208-ceab08e6009f",
              "name": "title",
              "value": "={{ $json.Title }}",
              "type": "string"
            },
            {
              "id": "287401df-f9ef-4200-afa7-525118898057",
              "name": "description",
              "value": "={{ $json.Description }}",
              "type": "string"
            },
            {
              "id": "673f662e-bbb0-49e5-8825-76b53526ca87",
              "name": "keywords",
              "value": "={{ $json.keywords }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1560,
        540
      ],
      "id": "6a224c07-99d4-491b-9797-65e55606fff7",
      "name": "Data Input"
    },
    {
      "parameters": {
        "operation": "get",
        "databaseId": 139118,
        "tableId": 356544,
        "rowId": "={{ $('Get ID').item.json.id }}"
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        240,
        680
      ],
      "id": "f7699d7a-a81f-44d4-a879-ee790309192f",
      "name": "Baserow",
      "credentials": {
        "baserowApi": {
          "id": "iKQh0Jcxz7wezRWR",
          "name": "Baserow account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "d0413257-767f-4369-bbca-f9fc3cc1bde8",
              "name": "data",
              "value": "={{ $json.Post_Body_RU_m }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        460,
        680
      ],
      "id": "57202159-af16-4043-aa76-f91af543296b",
      "name": "Get_post_ru"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "1e21c144-a81c-48af-b3d6-a77f60f7881f",
              "name": "id",
              "value": "={{ $json.id }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "id": "340d38c5-b400-486d-bb0a-62e73a2788c5",
      "name": "Get ID 2",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2880,
        620
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем все входные данные\nconst items = $input.all();\n\n// Инициализируем массив для хранения выходных данных\nconst output = [];\n\n/**\n * Функция для преобразования Markdown в чистый текст.\n * Удаляет изображения, ссылки, код, и преобразует заголовки, списки и цитаты.\n * @param {string} markdown - Исходный текст в формате Markdown\n * @returns {string} - Преобразованный чистый текст\n */\nfunction markdownToPlainText(markdown) {\n    let text = markdown;\n\n    // 1. Удаляем блоки кода (```код```)\n    text = text.replace(/```[\\s\\S]*?```/g, '');\n\n    // 2. Удаляем встроенный код (`код`)\n    text = text.replace(/`([^`]+)`/g, '$1');\n\n    // 3. Удаляем изображения (![alt](url))\n    text = text.replace(/!$begin:math:display$.*?$end:math:display$$begin:math:text$.*?$end:math:text$/g, '');\n\n    // 4. Заменяем ссылки [текст](url) на только текст\n    text = text.replace(/$begin:math:display$([^$end:math:display$]+)\\]$begin:math:text$[^$end:math:text$]+\\)/g, '$1');\n\n    // 5. Преобразуем заголовки (## Заголовок) в текст с переносом строки\n    text = text.replace(/^#{1,6}\\s+(.*)$/gm, '$1\\n');\n\n    // 6. Преобразуем ненумерованные списки (- элемент) в текст с тире\n    text = text.replace(/^[-*+]\\s+(.*)$/gm, '- $1');\n\n    // 7. Преобразуем нумерованные списки (1. элемент) в текст с числами\n    text = text.replace(/^\\d+\\.\\s+(.*)$/gm, '1. $1');\n\n    // 8. Преобразуем цитаты (> цитата) в текст\n    text = text.replace(/^>\\s+(.*)$/gm, '$1');\n\n    // 9. Удаляем жирный и курсивный текст (**жирный**, *курсив*)\n    text = text.replace(/\\*\\*(.*?)\\*\\*/g, '$1'); // жирный\n    text = text.replace(/\\*(.*?)\\*/g, '$1'); // курсив\n    text = text.replace(/__(.*?)__/g, '$1'); // жирный\n    text = text.replace(/_(.*?)_/g, '$1'); // курсив\n    text = text.replace(/~~(.*?)~~/g, '$1'); // зачеркивание\n\n    // 10. Удаляем оставшиеся символы Markdown (например, >, #, etc.)\n    text = text.replace(/([*_~`#>])/g, '');\n\n    // 11. Нормализуем множественные переносы строк до двух\n    text = text.replace(/\\n{3,}/g, '\\n\\n');\n\n    // 12. Удаляем начальные и конечные пробелы\n    text = text.trim();\n\n    return text;\n}\n\n/**\n * Функция для подсчета количества слов в тексте\n * @param {string} text - Чистый текст\n * @returns {number} - Количество слов\n */\nfunction countWords(text) {\n    if (!text) return 0;\n    // Разбиваем текст по пробелам и переносам строк, фильтруем пустые строки\n    return text.split(/\\s+/).filter(word => word.length > 0).length;\n}\n\n// Проходим по каждому входному элементу\nfor (const item of items) {\n    // Проверяем наличие поля 'Post_Body_RU_m'\n    if (item.json && item.json.Post_Body_RU_m) {\n        const markdown = item.json.Post_Body_RU_m;\n\n        // 1. Преобразуем Markdown в чистый текст\n        const clean_text = markdownToPlainText(markdown);\n\n        // 2. Считаем количество слов в чистом тексте\n        const word_count = countWords(clean_text);\n\n        // 3. Вычисляем время чтения (130 слов в минуту), округляем вниз\n        let minutes = Math.floor(word_count / 130);\n        if (minutes < 1) minutes = 1; // Минимум 1 минута\n\n        const time_to_read = `${minutes} min to read`;\n\n        // 4. Создаем новый объект с только двумя полями\n        const newItem = {\n            json: {\n                time_to_read: time_to_read,\n                clean_text: clean_text\n            }\n        };\n\n        output.push(newItem);\n    } else {\n        // Если поле отсутствует, добавляем объект с пустыми значениями или сообщением об ошибке\n        const newItem = {\n            json: {\n                time_to_read: \"0 min to read\",\n                clean_text: \"\"\n            }\n        };\n        output.push(newItem);\n        // Или, если хотите выбросить ошибку, раскомментируйте строку ниже\n        // throw new Error('Элемент не содержит поля Post_Body_RU_m.');\n    }\n}\n\n// Возвращаем обработанные данные\nreturn output;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2000,
        620
      ],
      "id": "a3822289-2f78-4d7f-bbe8-328373f087db",
      "name": "Code1"
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 139118,
        "tableId": 356544,
        "rowId": "={{ $('Baserow add Post translations and summary').item.json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 2660085,
              "fieldValue": "={{ $json.time_to_read }}"
            },
            {
              "fieldId": 2987678,
              "fieldValue": "={{ $json.clean_text }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        2220,
        620
      ],
      "id": "da371343-489c-47da-8c44-c605ec6dcd3d",
      "name": "Baserow1",
      "credentials": {
        "baserowApi": {
          "id": "iKQh0Jcxz7wezRWR",
          "name": "Baserow account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "databaseId": 139118,
        "tableId": 356544,
        "rowId": "={{ $('Get ID 2').item.json.id }}",
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": 3176727,
              "fieldValue": "true"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.baserow",
      "typeVersion": 1,
      "position": [
        3400,
        620
      ],
      "id": "49942e1c-bc03-47bf-9c03-621029773365",
      "name": "Baserow2",
      "credentials": {
        "baserowApi": {
          "id": "iKQh0Jcxz7wezRWR",
          "name": "Baserow account"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-11-10T11:12:42.068Z",
      "updatedAt": "2024-11-10T11:12:42.068Z",
      "id": "vgr897z7Ao8rJnZh",
      "name": "navi"
    }
  ],
  "triggerCount": 2,
  "updatedAt": "2025-02-07T17:09:54.000Z",
  "versionId": "ae6ee214-ed33-4e95-8210-ccbbe7da2a14"
}