{
  "active": false,
  "connections": {
    "Code": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "OpenAI",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Workflow Trigger": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "Finish",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2024-10-07T20:11:48.334Z",
  "id": "A50VsfUdjPaO0gkR",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Translate big html from RU to UA",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Получаем входные данные\nlet items = $input.all();\nlet Data = items[0].json.data;\n\n// Устанавливаем максимальный размер для каждой части (измените при необходимости)\nconst MAX_SIZE = 5000;\n\n// Инициализируем массив для хранения частей\nlet Data_Array = [];\n\n// Регулярное выражение для поиска закрывающих тегов\nconst closingTagRegex = /<\\/(p|div|section|article|ul|ol|li|h[1-6])>/gi;\n\n// Находим все позиции закрывающих тегов\nlet match;\nlet splitPoints = [];\nwhile ((match = closingTagRegex.exec(Data)) !== null) {\n    splitPoints.push(match.index + match[0].length);\n}\n\n// Если не найдено ни одной точки разделения, разбиваем данные на части фиксированного размера\nif (splitPoints.length === 0) {\n    for (let start = 0; start < Data.length; start += MAX_SIZE) {\n        Data_Array.push(Data.substring(start, start + MAX_SIZE));\n    }\n} else {\n    // Инициализируем переменные для отслеживания текущей позиции\n    let start = 0;\n    let end = 0;\n\n    for (let i = 0; i < splitPoints.length; i++) {\n        let splitPoint = splitPoints[i];\n        let chunkLength = splitPoint - start;\n\n        if (chunkLength <= MAX_SIZE) {\n            end = splitPoint;\n        } else {\n            if (end > start) {\n                // Добавляем часть от start до end\n                Data_Array.push(Data.substring(start, end));\n                start = end;\n                i--; // Повторно оцениваем текущую точку разделения\n            } else {\n                // Если нет подходящей точки разделения, разделяем на части фиксированного размера\n                Data_Array.push(Data.substring(start, start + MAX_SIZE));\n                start += MAX_SIZE;\n                i--; // Повторно оцениваем текущую точку разделения\n            }\n        }\n    }\n\n    // Добавляем оставшиеся данные после последней точки разделения\n    if (start < Data.length) {\n        while ((Data.length - start) > MAX_SIZE) {\n            Data_Array.push(Data.substring(start, start + MAX_SIZE));\n            start += MAX_SIZE;\n        }\n        // Добавляем последнюю часть\n        if (start < Data.length) {\n            Data_Array.push(Data.substring(start));\n        }\n    }\n}\n\n// Преобразуем Data_Array в массив объектов для n8n\nlet output = Data_Array.map(part => {\n    return { json: { data: part } };\n});\n\n// Возвращаем массив объектов\nreturn output;\n"
      },
      "id": "ae3a51b4-1f02-4565-aacf-a85d60e8461b",
      "name": "Code",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        700,
        420
      ]
    },
    {
      "parameters": {
        "batchSize": "=1",
        "options": {
          "reset": false
        }
      },
      "id": "7e0b916d-26ff-4d80-b796-062ffa57a0a3",
      "name": "Loop Over Items",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1060,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// Получаем входные данные\nlet items = $input.all();\n\n// Инициализируем массив для хранения контента\nlet Data_Array = [];\n\n// Проходим по каждому элементу и извлекаем контент\nfor (let item of items) {\n    if (item.json && item.json.message && item.json.message.content) {\n        Data_Array.push(item.json.message.content);\n    } else {\n        throw new Error('Элемент не содержит ожидаемого контента.');\n    }\n}\n\n// Проверяем, что Data_Array является массивом\nif (!Array.isArray(Data_Array)) {\n    throw new Error('Data_Array должен быть массивом.');\n}\n\n// Объединяем все элементы массива в одну строку\nlet Data = Data_Array.join('');\n\n// Возвращаем объединенные данные\nreturn [{ json: { Data } }];\n"
      },
      "id": "36c36c0c-4060-4b88-8a61-81f96b663de7",
      "name": "Code1",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1380,
        100
      ]
    },
    {
      "parameters": {},
      "id": "d8911a04-da82-4ac2-8de7-6388b4aae38d",
      "name": "Execute Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1,
      "position": [
        420,
        420
      ]
    },
    {
      "parameters": {},
      "id": "3b4e323f-1387-480f-acef-ff5e2b8be22a",
      "name": "Finish",
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        1660,
        100
      ]
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=translate the obtained HTML code fragment from Russian to Ukrainian, but do not change, add or correct any HTML tags. Consider the yachting focus of the text and the importance of correct translation Return only html that you get, without your comments and aditional tegs. \n\n{{ $json.data }}"
            }
          ]
        },
        "options": {}
      },
      "id": "8939f38e-def1-41be-af92-b405aa843003",
      "name": "OpenAI",
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.4,
      "position": [
        1300,
        380
      ],
      "credentials": {
        "openAiApi": {
          "id": "LWqwOoyrWqYHIcaW",
          "name": "OpenAi account"
        }
      }
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2024-11-08T10:05:35.000Z",
  "versionId": "9b8f95a4-6734-4a6e-aac7-bfb0c923421b"
}